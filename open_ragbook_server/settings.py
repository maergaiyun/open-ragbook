"""
Django settings for open_ragbook_server project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
import sys
import pymysql
import datetime

from logging.handlers import RotatingFileHandler, TimedRotatingFileHandler
from datetime import timedelta
from pathlib import Path
from dotenv import load_dotenv

pymysql.install_as_MySQLdb()

# 加载 .env 文件中的环境变量
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.append(os.path.join(os.path.dirname(__file__), 'account_mgt'))

# 媒体文件配置
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# 确保媒体目录存在
os.makedirs(MEDIA_ROOT, exist_ok=True)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-d@o%v)9%#12_8or1o#9h$d79i+dp@!+k5t6dg_r9b_rvgwnpiy'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# CSRF 配置
CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8080',
    'http://127.0.0.1:8080',
    # 如果您的前端部署在其他域名，也可以添加到这里
]

# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'account_mgt',  # 账户管理
    'knowledge_mgt',  # 知识库管理
    'system_mgt',  # 系统管理
    'chat_mgt',  # 聊天管理
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',  # 禁用CSRF中间件
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'open_ragbook_server.middleware.JWTAuthMiddleware',  # JWT认证中间件
]

# CORS配置
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

ROOT_URLCONF = 'open_ragbook_server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'open_ragbook_server.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # },
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.getenv('MYSQL_DB', 'open_ragbook_db'),
        'USER': os.getenv('MYSQL_USER', 'root'),
        'PASSWORD': os.getenv('MYSQL_PASSWORD', 'Tanhang2008@'),
        'HOST': os.getenv('MYSQL_HOST', '120.46.138.6'),
        'PORT': os.getenv('MYSQL_PORT', '3306'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'  # 设置为中国时区

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

JWT_CONF = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=7),
}

# 日志基础路径
LOG_BASE_DIR = os.path.join(BASE_DIR, 'logs')
# 确保日志基础目录存在
os.makedirs(LOG_BASE_DIR, exist_ok=True)

# 按日期生成日志目录路径
def get_log_directory():
    today = datetime.datetime.now().strftime('%Y-%m-%d')
    log_dir = os.path.join(LOG_BASE_DIR, today)
    os.makedirs(log_dir, exist_ok=True)
    return log_dir

# 生成当前日期目录下的日志文件路径
def get_log_file_path(filename):
    date_dir = get_log_directory()
    return os.path.join(date_dir, filename)

# 直接创建今天的日志目录
TODAY_LOG_DIR = get_log_directory()
print(f"日志目录: {TODAY_LOG_DIR}")

# 日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '【%(levelname)s】 %(asctime)s [%(process)d:%(thread)d] %(module)s.%(funcName)s:%(lineno)d: %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'simple': {
            'format': '%(asctime)s [%(levelname)s] %(message)s',
            'datefmt': '%H:%M:%S',
        },
        'colorful': {
            'format': '\033[92m%(asctime)s\033[0m [\033[94m%(process)d\033[0m] '
                      '[\033[1;%(levelcolor)sm%(levelname)s\033[0m] '
                      '\033[95m%(module)s.%(funcName)s:%(lineno)d\033[0m - %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'filters': {
        'add_color_filter': {
            '()': 'open_ragbook_server.utils.log_filters.ColorLogFilter',
        },
    },
    'handlers': {
        # 控制台彩色输出
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'colorful',
            'filters': ['add_color_filter'],
        },
        # 全量日志文件 - 使用当天目录
        'file': {
            'level': 'INFO',
            'class': 'open_ragbook_server.utils.log_handlers.DailyRotatingFileHandler',
            'filename': 'app.log',  # 文件名，路径由Handler自己处理
            'when': 'midnight',  # 每天午夜切割
            'interval': 1,
            'backupCount': 30,  # 保留30天的日志
            'maxBytes': 10 * 1024 * 1024,  # 10MB
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
        # 处理 ERROR 日志
        'error_file': {
            'level': 'ERROR',
            'class': 'open_ragbook_server.utils.log_handlers.DailyRotatingFileHandler',
            'filename': 'error.log',  # 文件名，路径由Handler自己处理
            'when': 'midnight',
            'interval': 1,
            'backupCount': 30,
            'maxBytes': 10 * 1024 * 1024,  # 10MB
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
        # 访问日志 - 记录HTTP请求
        'access_file': {
            'level': 'INFO',
            'class': 'open_ragbook_server.utils.log_handlers.DailyRotatingFileHandler',
            'filename': 'access.log',
            'when': 'midnight',
            'interval': 1,
            'backupCount': 30,
            'maxBytes': 10 * 1024 * 1024,  # 10MB
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
        # 直接使用绝对路径的日志处理器 - 直接指定到日期目录
        'absolute_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(TODAY_LOG_DIR, 'app_direct.log'),
            'maxBytes': 10 * 1024 * 1024,
            'backupCount': 5,
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
    },
    'loggers': {
        # Django默认日志
        'django': {
            'handlers': ['console', 'file', 'error_file', 'absolute_file'],
            'level': 'INFO',
            'propagate': False,
        },
        # Django请求日志
        'django.request': {
            'handlers': ['access_file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        # 数据库操作日志
        'django.db.backends': {
            'handlers': ['console', 'file'] if DEBUG else ['file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        # 账户管理模块日志
        'account_mgt': {
            'handlers': ['console', 'file', 'error_file', 'absolute_file'],
            'level': 'INFO',
            'propagate': False,
        },
        # 知识库管理模块日志
        'knowledge_mgt': {
            'handlers': ['console', 'file', 'error_file', 'absolute_file'],
            'level': 'INFO',
            'propagate': False,
        },
        # 聊天管理模块日志
        'chat_mgt': {
            'handlers': ['console', 'file', 'error_file', 'absolute_file'],
            'level': 'INFO',
            'propagate': False,
        },
        # 默认应用日志
        '': {  # root logger
            'handlers': ['console', 'file', 'error_file', 'absolute_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}
